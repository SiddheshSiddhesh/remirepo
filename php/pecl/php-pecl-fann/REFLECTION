Extension [ <persistent> extension #93 fann version 1.1.1 ] {

  - Constants [51] {
    Constant [ string FANN_VERSION ] { 2.2 }
    Constant [ integer FANN_TRAIN_INCREMENTAL ] { 0 }
    Constant [ integer FANN_TRAIN_BATCH ] { 1 }
    Constant [ integer FANN_TRAIN_RPROP ] { 2 }
    Constant [ integer FANN_TRAIN_QUICKPROP ] { 3 }
    Constant [ integer FANN_TRAIN_SARPROP ] { 4 }
    Constant [ integer FANN_LINEAR ] { 0 }
    Constant [ integer FANN_THRESHOLD ] { 1 }
    Constant [ integer FANN_THRESHOLD_SYMMETRIC ] { 2 }
    Constant [ integer FANN_SIGMOID ] { 3 }
    Constant [ integer FANN_SIGMOID_STEPWISE ] { 4 }
    Constant [ integer FANN_SIGMOID_SYMMETRIC ] { 5 }
    Constant [ integer FANN_SIGMOID_SYMMETRIC_STEPWISE ] { 6 }
    Constant [ integer FANN_GAUSSIAN ] { 7 }
    Constant [ integer FANN_GAUSSIAN_SYMMETRIC ] { 8 }
    Constant [ integer FANN_GAUSSIAN_STEPWISE ] { 9 }
    Constant [ integer FANN_ELLIOT ] { 10 }
    Constant [ integer FANN_ELLIOT_SYMMETRIC ] { 11 }
    Constant [ integer FANN_LINEAR_PIECE ] { 12 }
    Constant [ integer FANN_LINEAR_PIECE_SYMMETRIC ] { 13 }
    Constant [ integer FANN_SIN_SYMMETRIC ] { 14 }
    Constant [ integer FANN_COS_SYMMETRIC ] { 15 }
    Constant [ integer FANN_SIN ] { 16 }
    Constant [ integer FANN_COS ] { 17 }
    Constant [ integer FANN_ERRORFUNC_LINEAR ] { 0 }
    Constant [ integer FANN_ERRORFUNC_TANH ] { 1 }
    Constant [ integer FANN_STOPFUNC_MSE ] { 0 }
    Constant [ integer FANN_STOPFUNC_BIT ] { 1 }
    Constant [ integer FANN_NETTYPE_LAYER ] { 0 }
    Constant [ integer FANN_NETTYPE_SHORTCUT ] { 1 }
    Constant [ integer FANN_E_NO_ERROR ] { 0 }
    Constant [ integer FANN_E_CANT_OPEN_CONFIG_R ] { 1 }
    Constant [ integer FANN_E_CANT_OPEN_CONFIG_W ] { 2 }
    Constant [ integer FANN_E_WRONG_CONFIG_VERSION ] { 3 }
    Constant [ integer FANN_E_CANT_READ_CONFIG ] { 4 }
    Constant [ integer FANN_E_CANT_READ_NEURON ] { 5 }
    Constant [ integer FANN_E_CANT_READ_CONNECTIONS ] { 6 }
    Constant [ integer FANN_E_WRONG_NUM_CONNECTIONS ] { 7 }
    Constant [ integer FANN_E_CANT_OPEN_TD_W ] { 8 }
    Constant [ integer FANN_E_CANT_OPEN_TD_R ] { 9 }
    Constant [ integer FANN_E_CANT_READ_TD ] { 10 }
    Constant [ integer FANN_E_CANT_ALLOCATE_MEM ] { 11 }
    Constant [ integer FANN_E_CANT_TRAIN_ACTIVATION ] { 12 }
    Constant [ integer FANN_E_CANT_USE_ACTIVATION ] { 13 }
    Constant [ integer FANN_E_TRAIN_DATA_MISMATCH ] { 14 }
    Constant [ integer FANN_E_CANT_USE_TRAIN_ALG ] { 15 }
    Constant [ integer FANN_E_TRAIN_DATA_SUBSET ] { 16 }
    Constant [ integer FANN_E_INDEX_OUT_OF_BOUND ] { 17 }
    Constant [ integer FANN_E_SCALE_NOT_PRESENT ] { 18 }
    Constant [ integer FANN_E_INPUT_NO_MATCH ] { 19 }
    Constant [ integer FANN_E_OUTPUT_NO_MATCH ] { 20 }
  }

  - Functions {
    Function [ <internal:fann> function fann_create_standard ] {

      - Parameters [4] {
        Parameter #0 [ <required> $num_layers ]
        Parameter #1 [ <required> $num_neurons1 ]
        Parameter #2 [ <required> $num_neurons2 ]
        Parameter #3 [ <optional> $... ]
      }
    }
    Function [ <internal:fann> function fann_create_standard_array ] {

      - Parameters [2] {
        Parameter #0 [ <required> $num_layers ]
        Parameter #1 [ <required> $layers ]
      }
    }
    Function [ <internal:fann> function fann_create_sparse ] {

      - Parameters [5] {
        Parameter #0 [ <required> $connection_rate ]
        Parameter #1 [ <required> $num_layers ]
        Parameter #2 [ <required> $num_neurons1 ]
        Parameter #3 [ <required> $num_neurons2 ]
        Parameter #4 [ <optional> $... ]
      }
    }
    Function [ <internal:fann> function fann_create_sparse_array ] {

      - Parameters [3] {
        Parameter #0 [ <required> $connection_rate ]
        Parameter #1 [ <required> $num_layers ]
        Parameter #2 [ <required> $layers ]
      }
    }
    Function [ <internal:fann> function fann_create_shortcut ] {

      - Parameters [4] {
        Parameter #0 [ <required> $num_layers ]
        Parameter #1 [ <required> $num_neurons1 ]
        Parameter #2 [ <required> $num_neurons2 ]
        Parameter #3 [ <optional> $... ]
      }
    }
    Function [ <internal:fann> function fann_create_shortcut_array ] {

      - Parameters [2] {
        Parameter #0 [ <required> $num_layers ]
        Parameter #1 [ <required> $layers ]
      }
    }
    Function [ <internal:fann> function fann_destroy ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_copy ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_run ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $input ]
      }
    }
    Function [ <internal:fann> function fann_randomize_weights ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $min_weight ]
        Parameter #2 [ <required> $max_weight ]
      }
    }
    Function [ <internal:fann> function fann_init_weights ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $train_data ]
      }
    }
    Function [ <internal:fann> function fann_get_num_input ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_num_output ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_total_neurons ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_total_connections ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_network_type ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_connection_rate ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_num_layers ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_layer_array ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_bias_array ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_connection_array ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_weight_array ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $connections ]
      }
    }
    Function [ <internal:fann> function fann_set_weight ] {

      - Parameters [4] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $from_neuron ]
        Parameter #2 [ <required> $to_neuron ]
        Parameter #3 [ <required> $weight ]
      }
    }
    Function [ <internal:fann> function fann_train ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $input ]
        Parameter #2 [ <required> $desired_output ]
      }
    }
    Function [ <internal:fann> function fann_test ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $input ]
        Parameter #2 [ <required> $desired_output ]
      }
    }
    Function [ <internal:fann> function fann_get_MSE ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_bit_fail ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_reset_MSE ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_train_on_data ] {

      - Parameters [5] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $data ]
        Parameter #2 [ <required> $max_epochs ]
        Parameter #3 [ <required> $epochs_between_reports ]
        Parameter #4 [ <required> $desired_error ]
      }
    }
    Function [ <internal:fann> function fann_train_on_file ] {

      - Parameters [5] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $filename ]
        Parameter #2 [ <required> $max_epochs ]
        Parameter #3 [ <required> $epochs_between_reports ]
        Parameter #4 [ <required> $desired_error ]
      }
    }
    Function [ <internal:fann> function fann_train_epoch ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $data ]
      }
    }
    Function [ <internal:fann> function fann_test_data ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $data ]
      }
    }
    Function [ <internal:fann> function fann_read_train_from_file ] {

      - Parameters [1] {
        Parameter #0 [ <required> $filename ]
      }
    }
    Function [ <internal:fann> function fann_create_train ] {

      - Parameters [3] {
        Parameter #0 [ <required> $num_data ]
        Parameter #1 [ <required> $num_input ]
        Parameter #2 [ <required> $num_output ]
      }
    }
    Function [ <internal:fann> function fann_create_train_from_callback ] {

      - Parameters [4] {
        Parameter #0 [ <required> $num_data ]
        Parameter #1 [ <required> $num_input ]
        Parameter #2 [ <required> $num_output ]
        Parameter #3 [ <required> $user_function ]
      }
    }
    Function [ <internal:fann> function fann_destroy_train ] {

      - Parameters [1] {
        Parameter #0 [ <required> $train_data ]
      }
    }
    Function [ <internal:fann> function fann_shuffle_train_data ] {

      - Parameters [1] {
        Parameter #0 [ <required> $train_data ]
      }
    }
    Function [ <internal:fann> function fann_scale_train ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $train_data ]
      }
    }
    Function [ <internal:fann> function fann_descale_train ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $train_data ]
      }
    }
    Function [ <internal:fann> function fann_set_input_scaling_params ] {

      - Parameters [4] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $train_data ]
        Parameter #2 [ <required> $new_input_min ]
        Parameter #3 [ <required> $new_input_max ]
      }
    }
    Function [ <internal:fann> function fann_set_output_scaling_params ] {

      - Parameters [4] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $train_data ]
        Parameter #2 [ <required> $new_output_min ]
        Parameter #3 [ <required> $new_output_max ]
      }
    }
    Function [ <internal:fann> function fann_set_scaling_params ] {

      - Parameters [6] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $train_data ]
        Parameter #2 [ <required> $new_input_min ]
        Parameter #3 [ <required> $new_input_max ]
        Parameter #4 [ <required> $new_output_min ]
        Parameter #5 [ <required> $new_output_max ]
      }
    }
    Function [ <internal:fann> function fann_clear_scaling_params ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_scale_input ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $input_vector ]
      }
    }
    Function [ <internal:fann> function fann_scale_output ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $output_vector ]
      }
    }
    Function [ <internal:fann> function fann_descale_input ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $input_vector ]
      }
    }
    Function [ <internal:fann> function fann_descale_output ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $output_vector ]
      }
    }
    Function [ <internal:fann> function fann_scale_input_train_data ] {

      - Parameters [3] {
        Parameter #0 [ <required> $train_data ]
        Parameter #1 [ <required> $new_min ]
        Parameter #2 [ <required> $new_max ]
      }
    }
    Function [ <internal:fann> function fann_scale_output_train_data ] {

      - Parameters [3] {
        Parameter #0 [ <required> $train_data ]
        Parameter #1 [ <required> $new_min ]
        Parameter #2 [ <required> $new_max ]
      }
    }
    Function [ <internal:fann> function fann_scale_train_data ] {

      - Parameters [3] {
        Parameter #0 [ <required> $train_data ]
        Parameter #1 [ <required> $new_min ]
        Parameter #2 [ <required> $new_max ]
      }
    }
    Function [ <internal:fann> function fann_merge_train_data ] {

      - Parameters [2] {
        Parameter #0 [ <required> $data1 ]
        Parameter #1 [ <required> $data2 ]
      }
    }
    Function [ <internal:fann> function fann_duplicate_train_data ] {

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }
    Function [ <internal:fann> function fann_subset_train_data ] {

      - Parameters [3] {
        Parameter #0 [ <required> $data ]
        Parameter #1 [ <required> $pos ]
        Parameter #2 [ <required> $length ]
      }
    }
    Function [ <internal:fann> function fann_length_train_data ] {

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }
    Function [ <internal:fann> function fann_num_input_train_data ] {

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }
    Function [ <internal:fann> function fann_num_output_train_data ] {

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }
    Function [ <internal:fann> function fann_save_train ] {

      - Parameters [2] {
        Parameter #0 [ <required> $data ]
        Parameter #1 [ <required> $file_name ]
      }
    }
    Function [ <internal:fann> function fann_get_learning_rate ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_learning_rate ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $learning_rate ]
      }
    }
    Function [ <internal:fann> function fann_get_learning_momentum ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_learning_momentum ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $learning_momentum ]
      }
    }
    Function [ <internal:fann> function fann_get_train_error_function ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_train_error_function ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $error_function ]
      }
    }
    Function [ <internal:fann> function fann_get_train_stop_function ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_train_stop_function ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $stop_function ]
      }
    }
    Function [ <internal:fann> function fann_get_bit_fail_limit ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_bit_fail_limit ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $bit_fail_limit ]
      }
    }
    Function [ <internal:fann> function fann_set_callback ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $callback ]
      }
    }
    Function [ <internal:fann> function fann_get_quickprop_decay ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_quickprop_decay ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $quickprop_decay ]
      }
    }
    Function [ <internal:fann> function fann_get_quickprop_mu ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_quickprop_mu ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $quickprop_mu ]
      }
    }
    Function [ <internal:fann> function fann_get_rprop_increase_factor ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_rprop_increase_factor ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $rprop_increase_factor ]
      }
    }
    Function [ <internal:fann> function fann_get_rprop_decrease_factor ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_rprop_decrease_factor ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $rprop_decrease_factor ]
      }
    }
    Function [ <internal:fann> function fann_get_rprop_delta_min ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_rprop_delta_min ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $rprop_delta_min ]
      }
    }
    Function [ <internal:fann> function fann_get_rprop_delta_max ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_rprop_delta_max ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $rprop_delta_max ]
      }
    }
    Function [ <internal:fann> function fann_get_rprop_delta_zero ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_rprop_delta_zero ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $rprop_delta_zero ]
      }
    }
    Function [ <internal:fann> function fann_get_sarprop_weight_decay_shift ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_sarprop_weight_decay_shift ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $sarprop_weight_decay_shift ]
      }
    }
    Function [ <internal:fann> function fann_get_sarprop_step_error_threshold_factor ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_sarprop_step_error_threshold_factor ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $sarprop_step_error_threshold_factor ]
      }
    }
    Function [ <internal:fann> function fann_get_sarprop_step_error_shift ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_sarprop_step_error_shift ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $sarprop_step_error_shift ]
      }
    }
    Function [ <internal:fann> function fann_get_sarprop_temperature ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_sarprop_temperature ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $sarprop_temperature ]
      }
    }
    Function [ <internal:fann> function fann_get_training_algorithm ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_training_algorithm ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $training_algorithm ]
      }
    }
    Function [ <internal:fann> function fann_get_activation_function ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $layer ]
        Parameter #2 [ <required> $neuron ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_function ] {

      - Parameters [4] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_function ]
        Parameter #2 [ <required> $layer ]
        Parameter #3 [ <required> $neuron ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_function_layer ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_function ]
        Parameter #2 [ <required> $layer ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_function_hidden ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_function ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_function_output ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_function ]
      }
    }
    Function [ <internal:fann> function fann_get_activation_steepness ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $layer ]
        Parameter #2 [ <required> $neuron ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_steepness ] {

      - Parameters [4] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_steepness ]
        Parameter #2 [ <required> $layer ]
        Parameter #3 [ <required> $neuron ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_steepness_layer ] {

      - Parameters [3] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_steepness ]
        Parameter #2 [ <required> $layer ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_steepness_hidden ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_steepness ]
      }
    }
    Function [ <internal:fann> function fann_set_activation_steepness_output ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $activation_steepness ]
      }
    }
    Function [ <internal:fann> function fann_cascadetrain_on_data ] {

      - Parameters [5] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $data ]
        Parameter #2 [ <required> $max_neurons ]
        Parameter #3 [ <required> $neurons_between_reports ]
        Parameter #4 [ <required> $desired_error ]
      }
    }
    Function [ <internal:fann> function fann_cascadetrain_on_file ] {

      - Parameters [5] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $filename ]
        Parameter #2 [ <required> $max_neurons ]
        Parameter #3 [ <required> $neurons_between_reports ]
        Parameter #4 [ <required> $desired_error ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_output_change_fraction ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_output_change_fraction ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_output_change_fraction ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_output_stagnation_epochs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_output_stagnation_epochs ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_output_stagnation_epochs ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_candidate_change_fraction ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_candidate_change_fraction ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_candidate_change_fraction ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_candidate_stagnation_epochs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_candidate_stagnation_epochs ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_candidate_stagnation_epochs ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_weight_multiplier ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_weight_multiplier ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_weight_multiplier ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_candidate_limit ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_candidate_limit ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_candidate_limit ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_max_out_epochs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_max_out_epochs ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_max_out_epochs ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_min_out_epochs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_min_out_epochs ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_min_out_epochs ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_max_cand_epochs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_max_cand_epochs ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_max_cand_epochs ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_min_cand_epochs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_min_cand_epochs ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_min_cand_epochs ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_num_candidates ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_activation_functions_count ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_activation_functions ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_activation_functions ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_activation_functions ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_activation_steepnesses_count ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_activation_steepnesses ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_activation_steepnesses ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_activation_steepnesses_count ]
      }
    }
    Function [ <internal:fann> function fann_get_cascade_num_candidate_groups ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ann ]
      }
    }
    Function [ <internal:fann> function fann_set_cascade_num_candidate_groups ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $cascade_num_candidate_groups ]
      }
    }
    Function [ <internal:fann> function fann_create_from_file ] {

      - Parameters [1] {
        Parameter #0 [ <required> $configuration_file ]
      }
    }
    Function [ <internal:fann> function fann_save ] {

      - Parameters [2] {
        Parameter #0 [ <required> $ann ]
        Parameter #1 [ <required> $configuration_file ]
      }
    }
    Function [ <internal:fann> function fann_set_error_log ] {

      - Parameters [2] {
        Parameter #0 [ <required> $errdat ]
        Parameter #1 [ <required> $log_file ]
      }
    }
    Function [ <internal:fann> function fann_get_errno ] {

      - Parameters [1] {
        Parameter #0 [ <required> $errdat ]
      }
    }
    Function [ <internal:fann> function fann_reset_errno ] {

      - Parameters [1] {
        Parameter #0 [ <required> $errdat ]
      }
    }
    Function [ <internal:fann> function fann_reset_errstr ] {

      - Parameters [1] {
        Parameter #0 [ <required> $errdat ]
      }
    }
    Function [ <internal:fann> function fann_get_errstr ] {

      - Parameters [1] {
        Parameter #0 [ <required> $errdat ]
      }
    }
    Function [ <internal:fann> function fann_print_error ] {

      - Parameters [1] {
        Parameter #0 [ <required> $errdat ]
      }
    }
  }

  - Classes [1] {
    Class [ <internal:fann> class FANNConnection ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> public $from_neuron ]
        Property [ <default> public $to_neuron ]
        Property [ <default> public $weight ]
      }

      - Methods [5] {
        Method [ <internal:fann, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $from_neuron ]
            Parameter #1 [ <required> $to_neuron ]
            Parameter #2 [ <required> $weight ]
          }
        }

        Method [ <internal:fann> public method getFromNeuron ] {
        }

        Method [ <internal:fann> public method getToNeuron ] {
        }

        Method [ <internal:fann> public method getWeight ] {
        }

        Method [ <internal:fann> public method setWeight ] {

          - Parameters [1] {
            Parameter #0 [ <required> $weight ]
          }
        }
      }
    }
  }
}

